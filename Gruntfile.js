module.exports = function(grunt) {
  var concat = {
    options: {
      process: function(src, filepath) {
        return '// Source: ' + filepath + '\n' + src;
      },
      preserveComments: false
    },
    libs: {
      options: {
        process: false,
        banner: '/* this file is generated by concat task of grunt.js */\n'
      },
      src: [
        'assets/vendor/lodash.min.js',
        'assets/vendor/angular.min.js'
      ],
      dest: 'dist/libs.js'
    },
    viewer: {
      src: 'src/js/viewer/**/*.js',
      dest: 'dist/viewer.js'
    },
    sorter: {
      src: 'src/js/sorter/bootstrap.js',
      dest: 'dist/sorter.js'
    },
    filter: {
      src: 'src/js/filter/bootstrap.js',
      dest: 'dist/filter.js'
    },
    inject: {
      src: 'src/js/inject/*.js',
      dest: 'dist/inject.js'
    }
  };
  var uglify = grunt.util._.omit(concat, 'libs');

  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    copy: {
      manifest: {
        options: {
          processContent: function(content) {
            return grunt.template.process(content);
          }
        },
        src: ['src/manifest.json'],
        dest: 'dist/manifest.json'
      },
      fonts: {
        src: ['assets/fontello/font/fontello.woff'],
        dest: 'dist/fonts/font.woff'
      },
      icons: {
        expand: true,
        cwd: 'assets/',
        src: ['icons/*'],
        dest: 'dist/'
      }
    },
    jade: {
      viewer: {
        options: {
          data: {
            version: '<%= pkg.version %>'
          }
        },
        src: 'src/view/main.jade',
        dest: 'dist/viewer.html'
      },
      filter: {
        src: 'src/view/filter.jade',
        dest: 'dist/filter.html'
      }
    },
    less: {
      release: {
        options: {
          yuicompress: true
        },
        files: {
          'dist/style.css': ['src/less/style.less']
        }
      }
    },
    concat: concat,
    uglify: uglify,
    watch: {
      jade_viewer: {
        files: [
          'src/view/**/*.jade',
          '!src/view/filter.jade'
        ],
        tasks: ['jade:viewer']
      },
      jade_filter: {
        files: 'src/view/filter.jade',
        tasks: ['jade:filter']
      },
      less: {
        files: 'src/less/**/*.less',
        tasks: ['less']
      },
      viewer: {
        files: 'src/js/viewer/**/*.js',
        tasks: ['concat:viewer']
      },
      sorter: {
        files: 'src/js/sorter/**/*.js',
        tasks: ['concat:sorter']
      },
      filter: {
        files: 'src/js/filter/**/*.js',
        tasks: ['concat:filter']
      },
      inject: {
        files: 'src/js/inject/**/*.js',
        tasks: ['concat:inject']
      }
    },
    packaging: {
      release: {
        src: 'dist',
        dest: 'pixivViewer', // 拡張子を除いたファイル名
        options: {
          alias: ['<%= pkg.version %>'] // コピー作成
        }
      }
    }
  });

  grunt.loadNpmTasks('grunt-contrib-copy');
  grunt.loadNpmTasks('grunt-contrib-jade');
  grunt.loadNpmTasks('grunt-contrib-less');
  grunt.loadNpmTasks('grunt-contrib-concat');
  grunt.loadNpmTasks('grunt-contrib-uglify');
  grunt.loadNpmTasks('grunt-contrib-watch');
  grunt.loadTasks('tasks');

  grunt.registerTask('pre',     ['copy', 'jade', 'less']);
  grunt.registerTask('build',   ['pre', 'concat']);
  grunt.registerTask('min',     ['pre', 'concat:libs', 'uglify']);
  grunt.registerTask('release', ['min', 'package']);
  grunt.registerTask('default', ['build', 'watch']);
};
